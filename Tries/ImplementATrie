public class Trie {
    public class TrieNode
    {
        public char character;
        public TrieNode[] adjacents;
        public bool endsWord;
        // constructor
        public TrieNode(char c)
        {
            character = c;
            adjacents = new TrieNode[26];
            endsWord = false;
        }
    }
 public const int ALPHABET_SIZE = 26;
        public TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
        // initialize root with dummy char
            root = new TrieNode('#');
    }
    
    /** Inserts a word into the trie. */
    public void Insert(string word) {
        TrieNode curr = root;

            for (int level = 0; level < word.Length; level++)
            {
                char nextCharacter = word[level];
                int accessIndex = nextCharacter - 'a';

                if (curr.adjacents[accessIndex] == null)
                {
                    curr.adjacents[accessIndex] = new TrieNode(nextCharacter);
                }

                curr = curr.adjacents[accessIndex]; // Move to the next character
            }
        curr.endsWord = true;
    }
    
    /** Returns if the word is in the trie. */
    public bool Search(string word) {
        TrieNode curr = root;
        for(int i=0;i<word.Length;i++)
        {
            char currChar = word[i];
            int index = currChar-'a';
            if(curr.adjacents[index]==null)
                return false;
             curr = curr.adjacents[index]; // Move to the next character
        }
        return curr.endsWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public bool StartsWith(string word) {
        TrieNode curr = root;
        for(int i=0;i<word.Length;i++)
        {
            char currChar = word[i];
            int index = currChar-'a';
            if(curr.adjacents[index]==null)
                return false;
             curr = curr.adjacents[index]; // Move to the next character
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.Insert(word);
 * bool param_2 = obj.Search(word);
 * bool param_3 = obj.StartsWith(prefix);
 */
