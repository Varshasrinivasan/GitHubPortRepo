// Problem Statement : Merge Two Sorted Lists
// Time Complexity : O(m+n)
// Space Complexity : O(m+n)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */

public class Solution {
    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {
        // edge cases
        if(l1==null && l2==null)
            return null;
        if(l1==null && l2!=null)
            return l2;
        if(l2==null && l1!=null)
            return l1;
        ListNode newList = new ListNode(-1);
        ListNode curr = newList; 
        while(l1!=null && l2!=null)
        {
            if(l1.val<= l2.val)
            {
                curr.next = l1;
                l1=l1.next;
            }
            else
            {
                curr.next = l2;
                l2=l2.next;
            }
            curr = curr.next;
        }
        if(l1==null && l2!=null)
        {
            curr.next = l2;
        }
        if(l2==null && l1!=null)
        {
            curr.next = l1;
        }
        
        return newList.next;
    }
}
