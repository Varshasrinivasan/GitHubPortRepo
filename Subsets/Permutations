using System;
using System.Collections.Generic;

namespace DynamicProgramming
{
    //Problem Statement #
    //Given a set of distinct numbers, find all of its permutations.
    //Permutation is defined as the re-arranging of the elements of the set.For example, { 1, 2, 3}
    //has the following six permutations:
    //    {1, 2, 3}
    //{1, 3, 2}
    //{2, 1, 3}
    //{2, 3, 1}
    //{3, 1, 2}
    //{3, 2, 1}
    //If a set has ‘n’ distinct elements it will have n! permutations.
    // Time Complexity : O(N*N!)
    // SPace Complexity : O(N*N!)
    public class Permutations
    {
        public static List<List<int>> PermutationArray(int[] nums)
        {
            var res = new List<IList<int>>();
            if (nums.Length == 0)
            {
                res.Add(new List<int>());
            }

            else
            {
                Queue<List<int>> perms = new Queue<List<int>>();
                perms.Enqueue(new List<int>());
                for (int i = 0; i < nums.Length; i++)
                {
                    int size = perms.Count;
                    for (int x = 0; x < size; x++)
                    {
                        List<int> oldPerms = perms.Dequeue();

                        for (int y = 0; y <= oldPerms.Count; y++)
                        {
                            List<int> newPerms = new List<int>(oldPerms);
                            newPerms.Insert(y, nums[i]);
                            if (newPerms.Count == nums.Length)
                                res.Add(newPerms);
                            else
                                perms.Enqueue(newPerms);
                        }
                    }
                }

            }
            return res;
        }

        public static void Main()
        {
            int[] inp = { 1, 2, 3 };
            var output = PermutationArray(inp);
        }
    }
}
