public class MyStack {
/** Initialize your data structure here. */
        public MyStack()
        {
            
        }
    
       Queue<int> que1 = new Queue<int>();
        Queue<int> que2 = new Queue<int>();
        /** Push element x onto stack. */
        public void Push(int x)
        {
            que1.Enqueue(x);
        }

        /** Removes the element on top of the stack and returns that element. */
        public int Pop()
        {
            while(que1.Count>1)
            {
                que2.Enqueue(que1.Dequeue());
            }
            int elem = que1.Dequeue();
            while (que2.Count > 0)
            {
                que1.Enqueue(que2.Dequeue());
            }
            return elem;
        }

        /** Get the top element. */
        public int Top()
        {
            while (que1.Count > 1)
            {
                que2.Enqueue(que1.Dequeue());
            }
            int elem = que1.Dequeue();
            que2.Enqueue(elem);
            while (que2.Count > 0)
            {
                que1.Enqueue(que2.Dequeue());
            }
            return elem;
        }

        /** Returns whether the stack is empty. */
        public bool Empty()
        {
            if (que1.Count == 0)
                return true;
            else
                return false;
        }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.Push(x);
 * int param_2 = obj.Pop();
 * int param_3 = obj.Top();
 * bool param_4 = obj.Empty();
 */
