using System;

namespace Heaps
{
    class MinHeap
    {
        public int heap_size = 0;
        public int[] heap_array;
        // constructor to create MinHeap
        public MinHeap(int[] arr)
        {
            heap_size = arr.Length;
            heap_array = arr;
            int i = (heap_size - 1) / 2;
            while(i>=0)
            {
                MinHeapify(i);
                i--;
            }
        }
        public void MinHeapify(int i)
        {
            int left = i * 2 + 1;
            int right = i * 2 + 2;
            int smallest = i;
            if (left < heap_size && heap_array[left] < heap_array[smallest])
                smallest = left;
            if (right < heap_size && heap_array[right] < heap_array[smallest])
                smallest = right;
            if(smallest!=i)
            {
                Swap(i, smallest);
                MinHeapify(smallest);
            }

        }

        public void Extract_Min()
        {
            if(heap_array.Length>0)
            {
                int min = heap_array[0];
                heap_array[0] = heap_array[heap_array.Length - 1];
                MinHeapify(0);
            }
        }

        public void Insert(int x)
        {
            heap_array[heap_array.Length - 1] = x;
            int i = heap_array.Length - 1;
            while(i>=0 && heap_array[i]< heap_array[(i-1)/2])
            {
                Swap(i, (i - 1) / 2);
                i = (i - 1) / 2;
            }
        }
        public void Swap(int x, int y)
        {
            int temp = heap_array[x];
            heap_array[x] = heap_array[y];
            heap_array[y] = temp;
        }
        public static void Main()
        {
            int[] arr = { 4, 7, 3, 6, 7, 3, 2, 6, 8, 9, 6, 54 };
            MinHeap obj = new MinHeap(arr);
            obj.Extract_Min();
            obj.Extract_Min();
            obj.Insert(-2);
            foreach(var x in obj.heap_array)
            {
                Console.WriteLine(x);
            }

        }
    }
}
