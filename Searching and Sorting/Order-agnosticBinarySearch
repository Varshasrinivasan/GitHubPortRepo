using System;

namespace ModifiedBinarySearch
{
    // Problem statement :Given a sorted array of numbers, find if a given number ‘key’ is present in the array.
    //Though we know that the array is sorted, we don’t know if it’s sorted in ascending or descending order.
    //You should assume that the array can have duplicates.
    //Write a function to return the index of the ‘key’ if it is present in the array, otherwise return -1.
    // Time Complexity : O(n)
    // Space Complexity : O(1)
    class OrderAgnosticBinarySearch
    {
        public static int OrderBinarySearch(int[] arr, int key)
        {
            if (arr.Length == 0)
                return -1;
            int start = 0;
            int end = arr.Length - 1;
            while(start<=end)
            {
                int mid = start + (end - start) / 2;
                if (arr[mid] > key)
                {
                    if (mid - 1 >= 0 && arr[mid - 1] <= arr[mid])
                        end = mid - 1;
                    else if (mid + 1 <= arr.Length - 1 && arr[mid + 1] <= arr[mid])
                        start = mid + 1;
                }
                else if (arr[mid] < key)
                {
                    if (mid - 1 >= 0 && arr[mid - 1] >= arr[mid])
                        end = mid - 1;
                    else if (mid + 1 <= arr.Length - 1 && arr[mid + 1] >= arr[mid])
                        start = mid + 1;
                }
                else if (arr[mid] == key)
                    return mid;

            }
            return start;
        }

        public static void Main()
        {
            Console.WriteLine(OrderBinarySearch(new int[] { 4, 6, 10 }, 10));
            Console.WriteLine(OrderBinarySearch(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 5));
            Console.WriteLine(OrderBinarySearch(new int[] { 10, 6, 4 }, 10));
            Console.WriteLine(OrderBinarySearch(new int[] { 10, 6, 4 }, 4));
        }
    }
}
