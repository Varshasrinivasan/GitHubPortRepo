//Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.
// IPv4 addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots ("."), e.g.,172.16.254.1;
// Besides, leading zeros in the IPv4 is invalid. For example, the address 172.16.254.01 is invalid.
// IPv6 addresses are represented as eight groups of four hexadecimal digits, each group representing 16 bits. The groups are separated by colons (":"). For example, the address 2001:0db8:85a3:0000:0000:8a2e:0370:7334 is a valid one. Also, we could omit some leading zeros among four hexadecimal digits and some low-case characters in the address to upper-case ones, so 2001:db8:85a3:0:0:8A2E:0370:7334 is also a valid IPv6 address(Omit leading zeros and using upper cases).
// However, we don't replace a consecutive group of zero value with a single empty group using two consecutive colons (::) to pursue simplicity. For example, 2001:0db8:85a3::8A2E:0370:7334 is an invalid IPv6 address.

// TC : O(N)
// SC :O(1)

Besides, extra leading zeros in the IPv6 is also invalid. For example, the address 02001:0db8:85a3:0000:0000:8a2e:0370:7334 is invalid.

 
public class Solution {
    public string ValidIPAddress(string IP) {
        // edge cases
        int len = IP.Length;
        if(len==0)
        {
            return "Neither";
        }
        if(IP.Contains("."))
           {
               return IsIPV4(IP);
           }
        if(IP.Contains(":"))
           {
               return IsIPV6(IP);
           }
           return "Neither";
    }
    
    public string IsIPV4(string input)
           {
               var inp = input.Split(".");
                if(inp.Length!=4)
                { 
                    return "Neither";

                }
               foreach(var x in inp)
               {
                   int len = x.Length;
                   if(len==0 || len>3)
                   {
                       return "Neither";
                   }
                   if(x.Length>1 && x[0]=='0')
                   {
                       return "Neither";
                   }
                   for(int i=0;i<len;i++)
                   {
                       if(!char.IsDigit(x[i]))
                       {
                           return "Neither";
                       }
                   }
                   if(Int32.Parse(x)>255)
                        {
                           return "Neither";
                       }
               }
                return "IPv4";
           }
    public string IsIPV6(string input)
           {
               var inp = input.Split(":");
            if(inp.Length!=8)
                    { 
                        return "Neither";

                    }
               foreach(var x in inp)
               {
                   int len = x.Length;
                if(len==0 || len>4)
                   {
                       return "Neither";
                   }
                  
                    long output;
                    long.TryParse(x, System.Globalization.NumberStyles.HexNumber, null, out output);
                       if(!long.TryParse(x, System.Globalization.NumberStyles.HexNumber, null, out output))
                       {
                           return "Neither";
                       }
               }
                return "IPv6";
           }
}
