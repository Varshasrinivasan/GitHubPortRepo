// Problem : Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.
// We repeatedly make duplicate removals on S until we no longer can.
// Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.
// TC : O(N)
// SC : O(N)
public class Solution {
    public string RemoveDuplicates(string S) {
        int len = S.Length;
        // edge case
        if(len==0)
        {
            return S;
        }
        var sb = new StringBuilder();
        foreach (var c in S)
        {
            int l = sb.Length;
            if (l > 0 && c == sb[l - 1])
            {
                sb.Remove(l - 1, 1);
            }
            else
            {
                sb.Append(c);
            }
        }
        return sb.ToString();
    }
}
