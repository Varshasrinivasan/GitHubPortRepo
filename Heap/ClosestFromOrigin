using System;
namespace Heaps
{
    public class Point
    {
        public int x;
        public int y;

        public Point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }

        public int distFromOrigin()
        {
            // ignoring sqrt
            return (x * x) + (y * y);
        }
    }

    public class ClosestPointsFromOrigin
    {
        public Point[] heap_array;
       
        public ClosestPointsFromOrigin(Point[] point, int k)
        {
            heap_array = new Point[k];
            for(int i=0;i<k;i++)
            {
                heap_array[i] = point[i];
            }
            int y = (k - 1) / 2;
            while(y>=0)
            {
                MaxHeapify(y);
                y--;
            }

            for (int z = k; z < point.Length; z++)
            {
                if(heap_array[0].distFromOrigin() > point[z].distFromOrigin())
                {
                    Extract_Max();
                    Insert(point[z]);
                }
            }
        }
        public void MaxHeapify(int i)
        {
            int left = i * 2 + 1;
            int right = i * 2 + 2;
            int largest = i;
            if (left < heap_array.Length && heap_array[left].distFromOrigin() > heap_array[largest].distFromOrigin())
                largest = left;
            if (right < heap_array.Length && heap_array[right].distFromOrigin() > heap_array[largest].distFromOrigin())
                largest = right;
            if (largest != i)
            {
                Swap(i, largest);
                MaxHeapify(largest);
            }

        }

        public void Extract_Max()
        {
            if (heap_array.Length > 0)
            {
                heap_array[0] = heap_array[heap_array.Length - 1];
                MaxHeapify(0);
            }
        }

        public void Insert(Point x)
        {
            heap_array[heap_array.Length - 1] = x;
            int i = heap_array.Length - 1;
            while (i >= 0 && heap_array[i].distFromOrigin() > heap_array[(i - 1) / 2].distFromOrigin())
            {
                Swap(i, (i - 1) / 2);
                i = (i - 1) / 2;
            }
        }
        public void Swap(int x, int y)
        {
            Point temp = heap_array[x];
            heap_array[x] = heap_array[y];
            heap_array[y] = temp;
        }
        public static void Main()
        {
            Point[] point = { new Point(1, 3), new Point(3, 4), new Point(2, -1) };
            ClosestPointsFromOrigin obj = new ClosestPointsFromOrigin(point, 2);
            foreach (var heapObj in obj.heap_array)
            {
                Console.WriteLine("[" + heapObj.x + "," + heapObj.y + "]");
            }
            //[3,3],[5,-1],[-2,4]
            Point[] point2 = { new Point(3, 3), new Point(5, -1), new Point(-2, 4) };
            obj = new ClosestPointsFromOrigin(point2, 2);
            foreach (var heapObj in obj.heap_array)
            {
                Console.WriteLine("[" + heapObj.x + "," + heapObj.y + "]");
            }
        }
    }

}
