// Problem : Given a string S of '(' and ')' parentheses, we add the minimum number of parentheses ( '(' or ')', and in any positions ) so that the resulting parentheses string is valid. Formally, a parentheses string is valid if and only if:
// It is the empty string, or
// It can be written as AB (A concatenated with B), where A and B are valid strings, or
// It can be written as (A), where A is a valid string.
// Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.

// Time Complexity : O(N)
// Space Complexity : O(N)
public class Solution {
    public int MinAddToMakeValid(string S) {
        Stack<char> stck = new Stack<char>();
        // edge case
        if(S.Length==0)
            return 0;
        for(int i=0;i<S.Length;i++)
        {
            if(!Char.IsLetterOrDigit(S[i]))
            {
                if(S[i]==')' && stck.Count>0 && stck.Peek()=='(')
                {
                        stck.Pop();
                    
                }  
                else if(S[i]==']' && stck.Count>0 && stck.Peek()=='[')
                {
                        stck.Pop();
                    
                }
                else if(S[i]=='}' && stck.Count>0 && stck.Peek()=='{')
                {
                        stck.Pop();
                    
                }
                else
                {
                    stck.Push(S[i]);
                }
            }
        }
        
        return stck.Count;
    }
}
