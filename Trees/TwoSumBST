// Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target
// Time Complexity : O(N)
// Space Complexity : O(N)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool FindTarget(TreeNode root, int k) {
        List<int> lst = new List<int>();
        InorderTraversal(root,lst);
        int l = 0;
        int r = lst.Count-1;
        while(l<r)
        {
            int sum = lst[l] + lst[r];
            if(sum==k)
                return true;
            if(sum>k)
            {
                r--;
            }
            else
            {
                l++;
            }
        }
        return false;
    }
    
    public void InorderTraversal(TreeNode node, List<int> lst)
    {
        // base case
        if(node==null)
            return;
        InorderTraversal(node.left,lst);
        lst.Add(node.val);
        InorderTraversal(node.right,lst);
    }
}
