using System;
using System.Collections.Generic;

namespace Trees
{
    //Problem Statement : Given a binary tree and a number ‘S’, find if the tree has a path from root-to-leaf
    // such that the sum of all the node values of that path equals ‘S’.
    // Solution: Implement DFS and check is sum of each traversal is equal to S
    // Time Complexity : O(N)
    // Space Complexity : O(N)
    public class TreeNode
    {
        public int val;
        public TreeNode left;
        public TreeNode right;

        public TreeNode(int x)
        {
            val = x;
        }
    }
    public class BinaryTreePathSum
    {
        public bool hasPath(TreeNode root , int sum)
        {
            if (root == null)
                return false;
            // if the current node is a leaf and its value is equal to the sum, we've found a path
            if (root.val == sum && root.left == null && root.right == null)
                return true;
            // recursively call to traverse the left and right sub-tree
            // return true if any of the two recursive call return true
            return hasPath(root.left, sum - root.val) || hasPath(root.right, sum - root.val);
        }

       public static void Main(String[] args)
        {
          TreeNode root = new TreeNode(12);
          root.left = new TreeNode(7);
          root.right = new TreeNode(1);
          root.left.left = new TreeNode(9);
          root.right.left = new TreeNode(10);
          root.right.right = new TreeNode(5);
          BinaryTreePathSum obj = new BinaryTreePathSum();
          Console.WriteLine("Tree has path: " + obj.hasPath(root, 23));
          Console.WriteLine("Tree has path: " + obj.hasPath(root, 16));
        }
    }
}
