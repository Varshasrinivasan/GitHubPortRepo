/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, IList<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/
//Given a n-ary tree, find its maximum depth.
//The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
// TC : O(n)
// SC : O(1)
public class Solution {
    public int MaxDepth(Node root) {
        // edge cases
        if(root==null)
            return 0;
        Queue<Node> queue = new Queue<Node>();
        queue.Enqueue(root);
        int height=0;
        while(queue.Count>0)
        {
            int size = queue.Count;
            for(int i=0;i<size;i++)
            {
                var tempNode = queue.Dequeue();
                if(tempNode.children!=null)
                {
                    foreach(var n in tempNode.children)
                    {
                        queue.Enqueue(n);
                    }
                }
            }
            height++;
        }
        return height;
    }
}
