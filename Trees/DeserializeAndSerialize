using System;
using System.Collections.Generic;

namespace Trees
{
     
    public class SerializeDeserialize
    {
        // Encodes a tree to a single string.
        public string serialize(TreeNode root)
        {
            // base case
            if (root == null) return "X,";
            return root.val + "," + serialize(root.left) + serialize(root.right);
        }

        // Decodes your encoded data to tree.
        public TreeNode deserialize(string data)
        {
            string[] str = data.Split(',');
            Queue<string> queue = new Queue<string>(str);
            return deserialize(queue);
        }
        public TreeNode deserialize(Queue<string> queue)
        {
            string output = queue.Dequeue();
            if (output == "X")
                return null;
            TreeNode node = new TreeNode(Int32.Parse(output));
            node.left = deserialize(queue);
            node.right = deserialize(queue);
            return node;
        }

        public static void Main()
        {
            SerializeDeserialize obj = new SerializeDeserialize();
            TreeNode root = new TreeNode(10);
            root.left = new TreeNode(10);
            root.right = new TreeNode(11);
            string s = obj.serialize(root);
            TreeNode res = obj.deserialize(s);
        }
    }
}
