using System;
using System.Collections.Generic;

namespace Trees
{
    class PreInPostOrderTraversals
    {
        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int x) { val = x; }
        }
        public List<int> inReturnList = new List<int>();
        public List<int> preReturnList = new List<int>();
        public List<int> postReturnList = new List<int>();

        public List<int> InorderTraversal(TreeNode root)
        {
            if (root == null)
                return inReturnList;
            else
            {
                InorderTraversal(root.left);
                inReturnList.Add(root.val);
                InorderTraversal(root.right);
            }
            return inReturnList;
        }
        public List<int> PreorderTraversal(TreeNode root)
        {
            if (root == null)
                return preReturnList;
            else
            {
                preReturnList.Add(root.val);
                PreorderTraversal(root.left);
                PreorderTraversal(root.right);
            }
            return preReturnList;
        }
        public List<int> PostorderTraversal(TreeNode root)
        {
            if (root == null)
                return postReturnList;
            else
            {
                PostorderTraversal(root.left);
                PostorderTraversal(root.right);
                postReturnList.Add(root.val);
            }
            return postReturnList;
        }
        public static void Main(string[] args)
        {
            PreInPostOrderTraversals obj = new PreInPostOrderTraversals();
            TreeNode root = new TreeNode(1);
            TreeNode left1 = new TreeNode(2);
            TreeNode right1 = new TreeNode(3);
            TreeNode left2 = new TreeNode(4);
            TreeNode right2 = new TreeNode(5);
            TreeNode left3 = new TreeNode(2);
            //TreeNode right3 = new TreeNode(3);
            root.left = left1;
            root.right = right1;
            left1.left = left2;
            left1.right = right2;
            right1.left = left3;
            List<int> ret = obj.InorderTraversal(root);
            Console.WriteLine("Inorder");
            foreach (int val in ret)
            {
                Console.WriteLine(val);
            }
            Console.WriteLine("Preorder");
            ret = obj.PreorderTraversal(root);
            foreach (int val in ret)
            {
                Console.WriteLine(val);
            }
            Console.WriteLine("Postorder");
            ret = obj.PostorderTraversal(root);
            foreach (int val in ret)
            {
                Console.WriteLine(val);
            }
        }
    }
}
