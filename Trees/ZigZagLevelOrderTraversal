/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */

//Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).
// Time Complexity : O(N)
// Space Complexity : O(N)
public class Solution {
    public IList<IList<int>> ZigzagLevelOrder(TreeNode root) {
        var res = new List<IList<int>>();
        Queue<TreeNode> queue = new Queue<TreeNode> ();
        // edge cases
        if(root==null)
            return res;
        queue.Enqueue(root);
        bool reverseList = false;
        while(queue.Count>0)
        {
            int size = queue.Count;
            var currList = new List<int>();
            for(int i=0;i<size;i++)
            {
                TreeNode temp = queue.Dequeue();
                currList.Add(temp.val);
                if(temp.left!=null)
                {
                    queue.Enqueue(temp.left);
                }
                if(temp.right!=null)
                {
                    queue.Enqueue(temp.right);
                }
            }
            
            if(reverseList)
            {
                currList.Reverse();
            }
            reverseList= !reverseList;
            res.Add(currList);
        }
              
            return res;
        
    }
}
