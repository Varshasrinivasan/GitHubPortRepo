// Problem : You are given the root of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.
// Follow up: A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?
// TC :O(N)
// SC : O(1)


public class Solution {
    public TreeNode node1=null;
    public TreeNode node2=null;
    public bool check = false;
    public TreeNode prev=null;
    public void RecoverTree(TreeNode root) {
        if(root==null)
            return;
        TraverseInOrder(root);
        int temp = node1.val;
        node1.val=node2.val;
        node2.val=temp;
    }
    
    public void TraverseInOrder(TreeNode node)
    {
        if(node==null)
            return;
        TraverseInOrder(node.left);
        // process the current node
        if(prev!=null)
        {
            if(node.val<prev.val)
            {
                if(node1==null)
                {
                    node1=prev;
                }
                    node2 = node;
                
            }
        }
        
        prev = node;
        TraverseInOrder(node.right);
    }
}
