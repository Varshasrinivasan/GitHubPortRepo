// Problem : Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.
// TC :O(N)
// SC : O(N)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<int> RightSideView(TreeNode root) {
         List<int> res = new List<int>();
            if(root!=null)
            {
                Queue<TreeNode> queue = new Queue<TreeNode>();
                queue.Enqueue(root);
                while (queue.Count != 0)
                {
                    int size = queue.Count;
                    for (int i = 0; i < size; i++)
                    {
                        TreeNode temp = queue.Dequeue();
                         if (i == size - 1) 
                         {
                              res.Add(temp.val);    
                         }
                        if (temp.left != null)
                        {
                            queue.Enqueue(temp.left);
                        }
                        if (temp.right != null)
                        {
                            queue.Enqueue(temp.right);
                        }
                    }
                }
            }
           
            return res;
    }
}
