// Problem :You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.
//Follow up: Your solution should run in O(log n) time and O(1) space.

public class Solution {
    public int SingleNonDuplicate(int[] nums) {
        int len = nums.Length;
        if(len==0)
        {
            return int.MinValue;
        }
        int start = 0;
        int end = len-1;
        while(start<end)
        {
            int mid = start + (end-start)/2;
            bool halvesEven =(end-mid)%2==0;
            if( nums[mid+1]==nums[mid])
            {
                if(halvesEven)
                {
                    start = mid+2;
                }
                else
                {
                    end = mid-1;
                }
            }
            else if( nums[mid-1]==nums[mid])
            {
                if(halvesEven)
                {
                    end= mid-2;
                }
                else
                {
                    start = mid+1;
                }
            }
            else
            {
                return nums[mid];
            }
            
        }
           return nums[start];
        
    }
}
