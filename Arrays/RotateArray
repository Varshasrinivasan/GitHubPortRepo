//Given an array, rotate the array to the right by k steps, where k is non-negative.
// Example 1:
// Input: [1,2,3,4,5,6,7] and k = 3
// Output: [5,6,7,1,2,3,4]
// Explanation:
// rotate 1 steps to the right: [7,1,2,3,4,5,6]
// rotate 2 steps to the right: [6,7,1,2,3,4,5]
// rotate 3 steps to the right: [5,6,7,1,2,3,4]
public class Solution {
    public void Rotate(int[] nums, int k) {
            k %= nums.Length;
             // reverse all elements
           nums = Reverse(nums,0,nums.Length-1);
            // reverse first k elements
           nums = Reverse(nums,0,k-1);
            // reverse k+1 to last elements
             nums = Reverse(nums,k,nums.Length-1);
        
    }
    
    public int[] Reverse(int[] nums, int left, int right)
    {
        while(left<right)
        {
            int temp = nums[right];
            nums[right] = nums[left];
            nums[left] = temp;
            
            right--;
            left++;
        }
        return nums;
    }
}

// Time Complexity: O(N)
// Space complexity : O(1)
