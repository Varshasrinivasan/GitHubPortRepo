using System;
using System.Collections.Generic;

namespace ArraysAndStrings
{
    public class NumberOfProvinces
    {
        // Problem :There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
        // A province is a group of directly or indirectly connected cities and no other cities outside of the group.
        // You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.
        // Return the total number of provinces.
        public static int NumberOfProvincesDFS(int[][] isConnected)
        { // edge cases
            int rows = isConnected.Length;
            if (rows == 0)
            {
                return 0;
            }
            int count = 0;
            int[] seen = new int[rows];
            // perform DFS
            for (int i = 0; i < rows; i++)
            {
                if (seen[i] == 0)
                {
                    // trigger DFS
                    DFS(isConnected, i, seen);
                    count++;

                }
            }
            return count;

            // TC : O(N*N) --> have to look at all element in mateix
            // SC : O(N) --> for storing the seen values
        }

        public static void DFS(int[][] isConnected, int row, int[] seen)
        {
            for (int j = 0; j < isConnected.Length; j++)
            {
                if (isConnected[row][j] == 1 && seen[j] == 0)
                {
                    seen[j] = 1;
                    DFS(isConnected, j, seen);
                }
            }

        }

        public static int NumberOfProvincesBFS(int[][] isConnected)
        {
            // edge cases
            int rows = isConnected.Length;
            if (rows == 0)
            {
                return 0;
            }
            int count = 0;
            // Queues are used for BFS
            Queue<int> q = new Queue<int>();
            bool[] seen = new bool[rows];
            for(int i=0;i<rows;i++)
            {
                if(!seen[i])
                {
                    q.Enqueue(i);
                    while(q.Count!=0)
                    {
                        int s = q.Dequeue();
                        for(int j=0;j<rows;j++)
                        {
                            if(isConnected[s][j]==1 && !seen[j])
                            {
                                seen[j] = true;
                                q.Enqueue(j);
                            }
                        }
                    }
                    count++;
                }
            }
            return count;

            // TC : O(N*N) --> have to look at all element in mateix
            // SC : O(N) --> for storing the seen values
        }
    }
}
