/**
 * // This is ArrayReader's API interface.
 * // You should not implement it, or speculate about its implementation
 * class ArrayReader {
 *     public int Get(int index) {}
 * }
 */
// Problem:
// Given an integer array sorted in ascending order, write a function to search target in nums.  If target exists, then return its index, otherwise return -1. However, the array size is unknown to you. You may only access the array using an ArrayReader interface, where ArrayReader.get(k) returns the element of the array at index k (0-indexed).
// You may assume all integers in the array are less than 10000, and if you access the array out of bounds, ArrayReader.get will return 2147483647.
// TC : O(logN)
// SC : O(1)
class Solution {
    public int Search(ArrayReader reader, int target) {
        int index = 1;
        while(reader.get(index)!=int.MaxValue && reader.get(index)<target)
        {
            index= index*2;
        }
        
        return BinarySearch( reader,  target,index);
    }
    
    public int BinarySearch(ArrayReader reader, int target, int index)
    {
        int low =0;
        int high = index;
        while(low<=high)
        {
            int mid = low + (high-low)/2;
            var mid_value=reader.get(mid) ;
            if(mid_value==target)
            {
                return mid;
            }
            else if(mid_value>target || mid_value==int.MaxValue)
            {
                high= mid-1;
            }
            else if(mid_value<target)
            {
                low=mid+1;
            }
            
        }
        return -1;
    }
}
