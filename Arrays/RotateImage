// Problem :You are given an n x n 2D matrix representing an image.
// Rotate the image by 90 degrees (clockwise).
// Note:
// You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
// Time/Space Complexity
// Time Complexity: O(n2)
// Space Complexity: O(1)

public class Solution {
    public void Rotate(int[][] matrix) {
         int len = matrix.GetLength(0);
          // First transpose the matrix
            for(int i=0;i<len;i++)
            {
                for(int j=i;j<len;j++)
                {
                    var temp = matrix[i][j];
                    matrix[i][j] = matrix[j][i];
                    matrix[j][i] = temp;
                }
            }

            // Reverse the elements in each row
            for(int i=0;i<len;i++)
            {
                int start = 0;
                int end = len - 1;

                while(start<end)
                {
                    var temp = matrix[i][start];
                    matrix[i][start] = matrix[i][end];
                    matrix[i][end] = temp;
                    start++;
                    end--;
                }
            }
        
    }
}
